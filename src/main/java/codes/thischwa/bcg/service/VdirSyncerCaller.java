package codes.thischwa.bcg.service;

import codes.thischwa.bcg.conf.BCGConf;
import codes.thischwa.bcg.util.ProcessBuilderWrapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.Map;

/**
 * The VdirSyncerCaller class is responsible for invoking vdirsyncer commands such as sync and
 * discover.
 *
 * This class utilizes {@link ProcessBuilderWrapper} to handle the execution of these commands.
 * It also provides a logging mechanism to capture the output and errors generated by the
 * execution of these commands.
 */
@Slf4j
@Service
public class VdirSyncerCaller {

    private final BCGConf conf;

    public VdirSyncerCaller(BCGConf conf) {
        this.conf = conf;
    }

    void callSync() {
        run("vdirsyncer", "-v", "DEBUG", "-c" , conf.vdirsyncerConfig(), "sync");
    }

    void callDiscover() {
        run("vdirsyncer", "-v", "DEBUG", "-c" , conf.vdirsyncerConfig(), "discover");
    }

    void check() {
        run("vdirsyncer", "--version");
    }

    void testCall() {
        run("uname", "-sm");
    }

    void run(String... args) {
        ProcessBuilderWrapper pbw = new ProcessBuilderWrapper(args);
        pbw.setEnvironment(Map.of("PATH", System.getenv("PATH")));
        pbw.redirectErrorStream();
        String cmd = String.join(" ", args);
        try {
            pbw.run();
            String output = pbw.getOutput().trim();
            if (!output.isEmpty() && !output.equals("n/a")) {
                log.debug("Output for: {}\n{}", cmd, output);
            }
            if (pbw.hasErrors()) {
                throw new RuntimeException("Error while calling: " + cmd);
            }
        } catch (IOException e) {
            log.error("Error while calling: {}", cmd, e);
            throw new RuntimeException(e);
        }
    }
}
